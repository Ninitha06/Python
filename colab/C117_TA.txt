from google.colab import files
files_to_load = files.upload()

import pandas as pd

df = pd.read_csv("C117_TA.csv")

age = df["age"]

heart_attack = df["target"]

from sklearn.model_selection import train_test_split

age_train,age_test,heart_attack_train,heart_attack_test = train_test_split(age,heart_attack,test_size=0.25,random_state=0)

import numpy as np
from sklearn.linear_model import LogisticRegression


X = np.reshape(age_train.ravel(),(len(age_train),1))
Y = np.reshape(heart_attack_train.ravel(),(len(heart_attack_train),1))

lr=LogisticRegression(random_state=0)
lr.fit(X,Y)

X_test = np.reshape(age_test.ravel(),(len(age_test),1))
Y_test = np.reshape(heart_attack_test.ravel(),(len(heart_attack_test),1))

Y_result = lr.predict(X_test)

predicted_values=[]

for i in Y_result:
  if i == 0:
    predicted_values.append("Yes")
  else:
    predicted_values.append("No")

actual_values=[]
for i in Y_test.ravel():
  if i == 0:
    actual_values.append("Yes")
  else:
    actual_values.append("No")




from sklearn.metrics import confusion_matrix

labels=["Yes","No"]

cm = confusion_matrix(actual_values,predicted_values,labels)


import seaborn as sns
import matplotlib.pyplot as plt

ax=plt.subplot()
sns.heatmap(cm,annot=True,ax=ax)
ax.set_title("Confusion Matrix")
ax.set_xlabel("Predicted")
ax.set_ylabel("Actual")
ax.xaxis.set_ticklabels(labels)
ax.yaxis.set_ticklabels(labels)



accuracy = (16+36)/(16+36+17+7)
print(accuracy)