print("hello world")

### This is a sample text
# **New Section**


from google.colab import files 
data_to_load = files.upload()


import plotly.express as px 
df = px.data.gapminder().query("country=='Canada'")
fig = px.line(df,x="year",y="lifeExp",title="Life expectancy in Canada")
fig.show()

import pandas as pd
import statistics
import plotly.express as px

from google.colab import files 
data_to_load = files.upload()

df = pd.read_csv("savings_data_final.csv")
#Color given to rem_any field
fig = px.scatter(df,y="quant_saved",color="rem_any")
fig.show()

import csv

with open('savings_data_final.csv',newline="") as f:
  reader = csv.reader(f)
  savings_data = list(reader)
  savings_data.pop(0)

  #finding total number of people and total people reminded

  total_people = len(savings_data)
  total_people_reminded = 0
  for data in savings_data:
    if(int(data[3])==1):
      total_people_reminded = total_people_reminded + 1
    
  import plotly.graph_objects as go
  fig = go.Figure(go.Bar(x=["Reminded","Not Reminded"],y=[total_people_reminded,total_people-total_people_reminded]))
  fig.show()

  all_savings = []

for data in savings_data:
  all_savings.append(float(data[0]))

mean = statistics.mean(all_savings)
median = statistics.median(all_savings)
mode = statistics.mode(all_savings)

print("Mean ",mean)
print("Median ",median)
print("Mode ",mode)


reminded_savings = []
non_reminded_savings = []

for data in savings_data:
  if(int(data[3])==1):
    reminded_savings.append(float(data[0]))
  else:
    non_reminded_savings.append(float(data[0]))

print("Mean of people who were reminded to save",statistics.mean(reminded_savings))
print("Median of people who were reminded to save",statistics.median(reminded_savings))
print("Mode of people who were reminded to save",statistics.mode(reminded_savings))

print("Mean of people who were not reminded to save",statistics.mean(non_reminded_savings))
print("Median of people who were not reminded to save",statistics.median(non_reminded_savings))
print("Mode of people who were not reminded to save",statistics.mode(non_reminded_savings))

print("Standard devivation of all people", statistics.stdev(all_savings))
print("Standard devivation of people who were reminded", statistics.stdev(reminded_savings))
print("Standard devivation of people who were not reminded", statistics.stdev(non_reminded_savings))

import numpy as np

savings=[]
age=[]

for data in savings_data:
  if(float(data[5]!=0)):
    age.append(float(data[5]))
    savings.append(float(data[0]))

correlation = np.corrcoef(age,savings)
print(f"Correlation between the savings and age are {correlation[0,1]}")

import plotly.figure_factory as ff

fig = ff.create_distplot([df["quant_saved"].tolist()],["Savings"],show_hist=False)
fig.show()

import pandas as pd

df1 = pd.DataFrame({
    "A": [1, 3,5,6,7],
    "B": [2, 1, 4, 3, 4],
    "C" : [3, 3, 3, 2,1],
    "D" : [1,4,5,6,7]
})

 

#axis='index' means you are moving vertically down along the index. axis='columns' means you are moving horizontally right along the columns
# quantile axis=0 means index and 1 means columns

# in A: arrange in ascending..so same, 1 is 0 index, 3 is 0.25 index, 5 is 0.5 index,6 is 0.75 index, 7 is 1.0 index

df1.quantile([.1,.25,.5,.75,1.0],axis=0)



import seaborn as sns
sns.boxplot(data=df,x=df["quant_saved"])

q1 = df["quant_saved"].quantile(0.25)
q3 = df["quant_saved"].quantile(0.75)
iqr = q3-q1 #Inter quartile range = q3-q1

print(f"Q1 is {q1}")
print(f"Q3 is {q3}")
print(f"IQR is {iqr}")

# whisker is the amount which is going to decide the outliers
lower_whisker = q1 - 1.5*iqr
higher_whisker = q3+1.5*iqr

print(f"Lower Whisker is {lower_whisker}")
print(f"Higher Whisker is {higher_whisker}")


new_df = df[df["quant_saved"]<higher_whisker]

new_savings = new_df["quant_saved"].tolist()

print(f"Mean of New Savings {statistics.mean(new_savings)}")
print(f"Median of New Savings {statistics.median(new_savings)}")
print(f"Mode of New Savings {statistics.mode(new_savings)}")
print(f"Standard Deviation of New Savings {statistics.stdev(new_savings)}")

fig1 = ff.create_distplot([new_savings],["Savings"],show_hist=False)
fig1.show()

import random

sampling_mean_list = []
for i in range(0,1000):
  temp_list=[]
  for j in range(0,100):
    temp_list.append(random.choice(new_savings))
  sampling_mean_list.append(statistics.mean(temp_list))

mean_sampling = statistics.mean(sampling_mean_list)
stdev_sampling = statistics.stdev(sampling_mean_list)

fig2 = ff.create_distplot([sampling_mean_list],["Savings Sampling"],show_hist=False)
fig2.add_trace(go.Scatter(x=[mean_sampling,mean_sampling],y=[0,0.1],mode="lines",name="MEAN"))
fig2.show()

print(f"Standard Deviation of Sampling data {stdev_sampling}")


temp_df = new_df[new_df.age!=0]
age = temp_df['age'].tolist()
savings_age = temp_df['quant_saved'].tolist()

correlation1 = np.corrcoef(age,savings_age)
print(f"Correlation between age and savings is {correlation1[0,1]}")

# Or reminded_df = new_df.loc[new_df["rem_any"]==1]
reminded_df = new_df[new_df.rem_any==1]
not_reminded_df = new_df[new_df.rem_any==0]

#head gives top most data
print(reminded_df.head())
print(not_reminded_df.head())

fig4 = ff.create_distplot([not_reminded_df["quant_saved"].tolist()],["Savings(Not Reminded)"],show_hist=False)
fig4.show()


not_reminded_savings = not_reminded_df["quant_saved"].tolist()

not_reminded_sampling_mean_list = []
for i in range(0,1000):
  temp_list = []
  for j in range(0,100):
    temp_list.append(random.choice(not_reminded_savings))
  not_reminded_sampling_mean_list.append(statistics.mean(temp_list))

mean_sampling_not_reminded = statistics.mean(not_reminded_sampling_mean_list)
stdev_sampling_not_reminded = statistics.stdev(not_reminded_sampling_mean_list)
fig5 = ff.create_distplot([not_reminded_sampling_mean_list],["Sampling Savings[Not reminded]"],show_hist=False)
fig5.add_trace(go.Scatter(x=[mean_sampling_not_reminded,mean_sampling_not_reminded],y=[0,0.1],mode="lines",name="MEAN"))
fig5.show()

print(f"Mean of sampling not reminded {mean_sampling_not_reminded}")
print(f"Std Deviation of sampling not reminded {stdev_sampling_not_reminded}")



reminded_savings = reminded_df["quant_saved"].tolist()

reminded_sampling_mean_list = []
for i in range(0,1000):
  temp_list = []
  for j in range(0,100):
    temp_list.append(random.choice(reminded_savings))
  reminded_sampling_mean_list.append(statistics.mean(temp_list))

mean_sampling_reminded = statistics.mean(reminded_sampling_mean_list)
stdev_sampling_reminded = statistics.stdev(reminded_sampling_mean_list)
fig6 = ff.create_distplot([reminded_sampling_mean_list],["Sampling Savings[reminded]"],show_hist=False)
fig6.add_trace(go.Scatter(x=[mean_sampling_reminded,mean_sampling_reminded],y=[0,0.1],mode="lines",name="MEAN"))
fig6.show()

print(f"Mean of sampling reminded {mean_sampling_reminded}")
print(f"Std Deviation of sampling reminded {stdev_sampling_reminded}")

z_score = (mean_sampling_reminded-mean_sampling_not_reminded)/stdev_sampling_not_reminded
print(f"Z score is {z_score}")